files = dir('./bunny/data/*.ply');

meanhists = [];
std_bins =[];
for clouds = 1:length(files)

currentfilename = files(clouds).name;    
currentfilepath = files(clouds).folder;

filetoread = strcat(currentfilepath, '\', currentfilename);
    
ptCloud = pcread(filetoread);


%estimate the surface normals of the point cloud?

%{
normals = pcnormals(ptCloud) returns a matrix that 
stores a normal for each point in the input ptCloud. 
The function uses six neighboring points to fit a local plane
 to determine each normal vector.

Can use a k parameter to determine the number of points to use 
in local plane fitting
%}

normals = pcnormals(ptCloud);

%{

%figure
%pcshow(ptCloud); % well that was easy
x = ptCloud.Location(1:end,1);
y = ptCloud.Location(1:end,2);
z = ptCloud.Location(1:end,3);
u = normals(1:end,1);
v = normals(1:end,2);
w = normals(1:end,3);
%quiver3(x,y,z,u,v,w);

%}

radius = 0.003;

parfor point = 1:ptCloud.Count
    
pointx  = ptCloud.Location(point,1);
pointy = ptCloud.Location(point,2); 
pointz = ptCloud.Location(point,3);

P = [pointx, pointy, pointz];
disp(point);

%we have surface normals, now we need the "Darboux uvn frame"
%To get these calculations, from the paper we need:
% 1. Find all the points in the sphere generated by a given radius
[indices,dists] = findNeighborsInRadius(ptCloud,P,radius); %use this

for n = 1:length(indices)

    hist = compute_features(indices(n), ptCloud, normals, radius);
    
    avg = [avg; hist];

end



%avg = bin_values(features, 0.0050);

%[N,edges] = histcounts(avg, 16);

end
%figure;

meanhist = get_mean_hist(avg);

meanhists = [meanhists; meanhist];

std_bin = std(avg);

std_bins= [std_bins; std_bin];

%bar(mestd_anhist);

%for every pair of points in the redius (they have to be different)
% 1.Take their estimated normals, ni and nj
% 2.pi has a smaller angle to the line connecting the two points
% 3. Calculate the following values : alpha phi and theta. 
% These three points, plus the euclidean distance of the two points, will
% give you the freature space.
% use pdist for the Euclidean distance

%once we have the set of features, as compute from above then
%Use the formula from 4) to do the FPFH of a given point.


%Once we have a working FPFH, do some persistence analysis. This analysis
%looks at points that haven't changed when you vary the radius of the
%k-neighbours part

%At the end, they look at noisy datasets. Try that too?

end

