function [uniquePoints] = ppfh(ptCloud,radius, cmptype)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here

localhistmap = java.util.HashMap();
normals = pcnormals(ptCloud);
normalsgpu = gpuArray(normals);
ptCloudgpu = gpuArray(ptCloud.Location);
avg = gpuArray([]);
parfor point = 1:ptCloud.Count
    

P = [ptCloud.Location(point,1), ptCloud.Location(point,2),ptCloud.Location(point,3)];
disp(point);

%we have surface normals, now we need the "Darboux uvn frame"
%To get these calculations, from the paper we need:
% 1. Find all the points in the sphere generated by a given radius
[indices,dists] = findNeighborsInRadius(ptCloud,P,radius); %use this

for n = 1:length(indices)

    hist = compute_featuresgpu(indices(n), ptCloud, ptCloudgpu, normals, radius);
    hist = gather(hist);

    avg = [avg; hist];

end

   localpointhist = get_mean_hist(hist);
   localhistmap.put(point, localpointhist);


%avg = bin_values(features, 0.0050);

%[N,edges] = histcounts(avg, 16);

end
%figure;
avg = gather(avg);
globalmeanhist = get_mean_hist(avg);

%globalmeanhists = [globalmeanhists; globalmeanhist];

std_bin = std(avg);

globalstddev = [globalstddev; std_bin];

globalstddev = std(globalstdev);

uniquePoints = persistant_values(globalmeanhist,globalstddev,localhistmap, cmptype);


end

